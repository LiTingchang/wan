package com.kuaikan.comic.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.kuaikan.comic.dao.bean.TopicBean;

import com.kuaikan.comic.dao.bean.ComicDetailBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COMIC_DETAIL.
*/
public class ComicDetailBeanDao extends AbstractDao<ComicDetailBean, Long> {

    public static final String TABLENAME = "COMIC_DETAIL";

    /**
     * Properties of entity ComicDetailBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Comments_count = new Property(0, Integer.class, "comments_count", false, "COMMENTS_COUNT");
        public final static Property Cover_image_url = new Property(1, String.class, "cover_image_url", false, "COVER_IMAGE_URL");
        public final static Property Created_at = new Property(2, Long.class, "created_at", false, "CREATED_AT");
        public final static Property Id = new Property(3, Long.class, "id", true, "ID");
        public final static Property Images = new Property(4, String.class, "images", false, "IMAGES");
        public final static Property Is_favourite = new Property(5, Boolean.class, "is_favourite", false, "IS_FAVOURITE");
        public final static Property Is_liked = new Property(6, Boolean.class, "is_liked", false, "IS_LIKED");
        public final static Property Likes_count = new Property(7, Long.class, "likes_count", false, "LIKES_COUNT");
        public final static Property Title = new Property(8, String.class, "title", false, "TITLE");
        public final static Property Have_read = new Property(9, Boolean.class, "have_read", false, "HAVE_READ");
        public final static Property TopicId = new Property(10, long.class, "topicId", false, "TOPIC_ID");
        public final static Property Updated_at = new Property(11, Long.class, "updated_at", false, "UPDATED_AT");
        public final static Property Url = new Property(12, String.class, "url", false, "URL");
        public final static Property Recommend_count = new Property(13, Long.class, "recommend_count", false, "RECOMMEND_COUNT");
    };

    private DaoSession daoSession;


    public ComicDetailBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ComicDetailBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COMIC_DETAIL' (" + //
                "'COMMENTS_COUNT' INTEGER," + // 0: comments_count
                "'COVER_IMAGE_URL' TEXT," + // 1: cover_image_url
                "'CREATED_AT' INTEGER," + // 2: created_at
                "'ID' INTEGER PRIMARY KEY ," + // 3: id
                "'IMAGES' TEXT," + // 4: images
                "'IS_FAVOURITE' INTEGER," + // 5: is_favourite
                "'IS_LIKED' INTEGER," + // 6: is_liked
                "'LIKES_COUNT' INTEGER," + // 7: likes_count
                "'TITLE' TEXT," + // 8: title
                "'HAVE_READ' INTEGER," + // 9: have_read
                "'TOPIC_ID' INTEGER NOT NULL ," + // 10: topicId
                "'UPDATED_AT' INTEGER," + // 11: updated_at
                "'URL' TEXT," + // 12: url
                "'RECOMMEND_COUNT' INTEGER);"); // 13: recommend_count
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_COMIC_DETAIL_ID ON COMIC_DETAIL" +
                " (ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COMIC_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ComicDetailBean entity) {
        stmt.clearBindings();
 
        Integer comments_count = entity.getComments_count();
        if (comments_count != null) {
            stmt.bindLong(1, comments_count);
        }
 
        String cover_image_url = entity.getCover_image_url();
        if (cover_image_url != null) {
            stmt.bindString(2, cover_image_url);
        }
 
        Long created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(3, created_at);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(5, images);
        }
 
        Boolean is_favourite = entity.getIs_favourite();
        if (is_favourite != null) {
            stmt.bindLong(6, is_favourite ? 1l: 0l);
        }
 
        Boolean is_liked = entity.getIs_liked();
        if (is_liked != null) {
            stmt.bindLong(7, is_liked ? 1l: 0l);
        }
 
        Long likes_count = entity.getLikes_count();
        if (likes_count != null) {
            stmt.bindLong(8, likes_count);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(9, title);
        }
 
        Boolean have_read = entity.getHave_read();
        if (have_read != null) {
            stmt.bindLong(10, have_read ? 1l: 0l);
        }
        stmt.bindLong(11, entity.getTopicId());
 
        Long updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(12, updated_at);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(13, url);
        }
 
        Long recommend_count = entity.getRecommend_count();
        if (recommend_count != null) {
            stmt.bindLong(14, recommend_count);
        }
    }

    @Override
    protected void attachEntity(ComicDetailBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    /** @inheritdoc */
    @Override
    public ComicDetailBean readEntity(Cursor cursor, int offset) {
        ComicDetailBean entity = new ComicDetailBean( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // comments_count
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cover_image_url
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // created_at
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // images
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // is_favourite
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // is_liked
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // likes_count
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // title
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // have_read
            cursor.getLong(offset + 10), // topicId
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // updated_at
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // url
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // recommend_count
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ComicDetailBean entity, int offset) {
        entity.setComments_count(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setCover_image_url(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreated_at(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setImages(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIs_favourite(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setIs_liked(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setLikes_count(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setTitle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHave_read(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setTopicId(cursor.getLong(offset + 10));
        entity.setUpdated_at(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRecommend_count(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ComicDetailBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ComicDetailBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTopicBeanDao().getAllColumns());
            builder.append(" FROM COMIC_DETAIL T");
            builder.append(" LEFT JOIN TOPIC T0 ON T.'TOPIC_ID'=T0.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ComicDetailBean loadCurrentDeep(Cursor cursor, boolean lock) {
        ComicDetailBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TopicBean topicBean = loadCurrentOther(daoSession.getTopicBeanDao(), cursor, offset);
         if(topicBean != null) {
            entity.setTopicBean(topicBean);
        }

        return entity;    
    }

    public ComicDetailBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ComicDetailBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ComicDetailBean> list = new ArrayList<ComicDetailBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ComicDetailBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ComicDetailBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
