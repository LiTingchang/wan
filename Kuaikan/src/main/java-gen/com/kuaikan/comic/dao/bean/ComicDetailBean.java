package com.kuaikan.comic.dao.bean;

import com.kuaikan.comic.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.kuaikan.comic.dao.ComicDetailBeanDao;
import com.kuaikan.comic.dao.TopicBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table COMIC_DETAIL.
 */
public class ComicDetailBean {

    private Integer comments_count;
    private String cover_image_url;
    private Long created_at;
    private Long id;
    private String images;
    private Boolean is_favourite;
    private Boolean is_liked;
    private Long likes_count;
    private String title;
    private Boolean have_read;
    private long topicId;
    private Long updated_at;
    private String url;
    private Long recommend_count;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ComicDetailBeanDao myDao;

    private TopicBean topicBean;
    private Long topicBean__resolvedKey;


    public ComicDetailBean() {
    }

    public ComicDetailBean(Long id) {
        this.id = id;
    }

    public ComicDetailBean(Integer comments_count, String cover_image_url, Long created_at, Long id, String images, Boolean is_favourite, Boolean is_liked, Long likes_count, String title, Boolean have_read, long topicId, Long updated_at, String url, Long recommend_count) {
        this.comments_count = comments_count;
        this.cover_image_url = cover_image_url;
        this.created_at = created_at;
        this.id = id;
        this.images = images;
        this.is_favourite = is_favourite;
        this.is_liked = is_liked;
        this.likes_count = likes_count;
        this.title = title;
        this.have_read = have_read;
        this.topicId = topicId;
        this.updated_at = updated_at;
        this.url = url;
        this.recommend_count = recommend_count;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getComicDetailBeanDao() : null;
    }

    public Integer getComments_count() {
        return comments_count;
    }

    public void setComments_count(Integer comments_count) {
        this.comments_count = comments_count;
    }

    public String getCover_image_url() {
        return cover_image_url;
    }

    public void setCover_image_url(String cover_image_url) {
        this.cover_image_url = cover_image_url;
    }

    public Long getCreated_at() {
        return created_at;
    }

    public void setCreated_at(Long created_at) {
        this.created_at = created_at;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getImages() {
        return images;
    }

    public void setImages(String images) {
        this.images = images;
    }

    public Boolean getIs_favourite() {
        return is_favourite;
    }

    public void setIs_favourite(Boolean is_favourite) {
        this.is_favourite = is_favourite;
    }

    public Boolean getIs_liked() {
        return is_liked;
    }

    public void setIs_liked(Boolean is_liked) {
        this.is_liked = is_liked;
    }

    public Long getLikes_count() {
        return likes_count;
    }

    public void setLikes_count(Long likes_count) {
        this.likes_count = likes_count;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Boolean getHave_read() {
        return have_read;
    }

    public void setHave_read(Boolean have_read) {
        this.have_read = have_read;
    }

    public long getTopicId() {
        return topicId;
    }

    public void setTopicId(long topicId) {
        this.topicId = topicId;
    }

    public Long getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(Long updated_at) {
        this.updated_at = updated_at;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public Long getRecommend_count() {
        return recommend_count;
    }

    public void setRecommend_count(Long recommend_count) {
        this.recommend_count = recommend_count;
    }

    /** To-one relationship, resolved on first access. */
    public TopicBean getTopicBean() {
        long __key = this.topicId;
        if (topicBean__resolvedKey == null || !topicBean__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TopicBeanDao targetDao = daoSession.getTopicBeanDao();
            TopicBean topicBeanNew = targetDao.load(__key);
            synchronized (this) {
                topicBean = topicBeanNew;
            	topicBean__resolvedKey = __key;
            }
        }
        return topicBean;
    }

    public void setTopicBean(TopicBean topicBean) {
        if (topicBean == null) {
            throw new DaoException("To-one property 'topicId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.topicBean = topicBean;
            topicId = topicBean.getId();
            topicBean__resolvedKey = topicId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
