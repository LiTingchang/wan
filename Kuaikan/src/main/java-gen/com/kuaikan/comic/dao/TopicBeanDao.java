package com.kuaikan.comic.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.kuaikan.comic.dao.bean.UserBean;

import com.kuaikan.comic.dao.bean.TopicBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TOPIC.
*/
public class TopicBeanDao extends AbstractDao<TopicBean, Long> {

    public static final String TABLENAME = "TOPIC";

    /**
     * Properties of entity TopicBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Comics_count = new Property(1, Integer.class, "comics_count", false, "COMICS_COUNT");
        public final static Property Cover_image_url = new Property(2, String.class, "cover_image_url", false, "COVER_IMAGE_URL");
        public final static Property Created_at = new Property(3, Long.class, "created_at", false, "CREATED_AT");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property Order = new Property(5, Integer.class, "order", false, "ORDER");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Updated_at = new Property(7, Long.class, "updated_at", false, "UPDATED_AT");
        public final static Property UserId = new Property(8, long.class, "userId", false, "USER_ID");
    };

    private DaoSession daoSession;


    public TopicBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TopicBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TOPIC' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'COMICS_COUNT' INTEGER," + // 1: comics_count
                "'COVER_IMAGE_URL' TEXT," + // 2: cover_image_url
                "'CREATED_AT' INTEGER," + // 3: created_at
                "'DESCRIPTION' TEXT," + // 4: description
                "'ORDER' INTEGER," + // 5: order
                "'TITLE' TEXT," + // 6: title
                "'UPDATED_AT' INTEGER," + // 7: updated_at
                "'USER_ID' INTEGER NOT NULL );"); // 8: userId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_TOPIC_ID ON TOPIC" +
                " (ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TOPIC'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TopicBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer comics_count = entity.getComics_count();
        if (comics_count != null) {
            stmt.bindLong(2, comics_count);
        }
 
        String cover_image_url = entity.getCover_image_url();
        if (cover_image_url != null) {
            stmt.bindString(3, cover_image_url);
        }
 
        Long created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(4, created_at);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(6, order);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        Long updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(8, updated_at);
        }
        stmt.bindLong(9, entity.getUserId());
    }

    @Override
    protected void attachEntity(TopicBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TopicBean readEntity(Cursor cursor, int offset) {
        TopicBean entity = new TopicBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // comics_count
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cover_image_url
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // created_at
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // order
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // updated_at
            cursor.getLong(offset + 8) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TopicBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setComics_count(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCover_image_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreated_at(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrder(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdated_at(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setUserId(cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TopicBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TopicBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserBeanDao().getAllColumns());
            builder.append(" FROM TOPIC T");
            builder.append(" LEFT JOIN USER T0 ON T.'USER_ID'=T0.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TopicBean loadCurrentDeep(Cursor cursor, boolean lock) {
        TopicBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserBean userBean = loadCurrentOther(daoSession.getUserBeanDao(), cursor, offset);
         if(userBean != null) {
            entity.setUserBean(userBean);
        }

        return entity;    
    }

    public TopicBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TopicBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TopicBean> list = new ArrayList<TopicBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TopicBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TopicBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
